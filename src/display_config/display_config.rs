//! # DBus interface proxy for: `org.gnome.Mutter.DisplayConfig`
//!
//! This code was generated by `zbus-xmlgen` `3.1.1` from DBus introspection data.
//! Source: `org.gnome.Mutter.DisplayConfig.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use super::{ApplyLogicalMonitor, Method};
use crate::display_config::State;
use std::collections::HashMap;
use zbus::zvariant::OwnedValue;
use zbus::{dbus_proxy, Result};

#[dbus_proxy(
    interface = "org.gnome.Mutter.DisplayConfig",
    default_service = "org.gnome.Mutter.DisplayConfig",
    default_path = "/org/gnome/Mutter/DisplayConfig"
)]
trait DisplayConfig {
    /// ApplyMonitorsConfig method
    fn apply_monitors_config(
        &self,
        serial: u32,
        method: Method,
        logical_monitors: Vec<ApplyLogicalMonitor>,
        properties: HashMap<String, OwnedValue>,
    ) -> Result<()>;

    /// GetCurrentState method
    fn get_current_state(&self) -> Result<State>;
}
